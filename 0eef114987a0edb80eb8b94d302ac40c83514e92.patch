diff -up azmq-1.0.2/azmq/detail/actor_service.hpp.2~ azmq-1.0.2/azmq/detail/actor_service.hpp
--- azmq-1.0.2/azmq/detail/actor_service.hpp.2~	2018-01-30 14:29:15.000000000 +0100
+++ azmq-1.0.2/azmq/detail/actor_service.hpp	2020-01-18 21:06:23.464175578 +0100
@@ -19,10 +19,15 @@
 #include "config/unique_lock.hpp"
 #include "config/condition_variable.hpp"
 
+#include <boost/version.hpp>
 #include <boost/assert.hpp>
 #include <boost/asio/signal_set.hpp>
 #include <boost/container/flat_map.hpp>
 
+#if BOOST_VERSION < 10700
+#   define AZMQ_DETAIL_USE_IO_SERVICE 1
+#endif
+
 #include <string>
 #include <vector>
 #include <memory>
@@ -37,7 +42,11 @@ namespace detail {
     public:
         inline static std::string get_uri(const char* pfx);
 
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE
         actor_service(boost::asio::io_service & ios)
+#else
+        actor_service(boost::asio::io_context & ios)	  
+#endif
             : azmq::detail::service_base<actor_service>(ios)
         { }
 
@@ -50,11 +59,19 @@ namespace detail {
 
         template<typename T>
         socket make_pipe(bool defer_start, T&& data) {
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE
             return make_pipe(get_io_service(), defer_start, std::forward<T>(data));
+#else
+            return make_pipe(get_io_context(), defer_start, std::forward<T>(data));	    
+#endif
         }
 
         template<typename T>
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE
         static socket make_pipe(boost::asio::io_service & ios, bool defer_start, T&& data) {
+#else
+        static socket make_pipe(boost::asio::io_context & ios, bool defer_start, T&& data) {
+#endif	  
             auto p = std::make_shared<model<T>>(std::forward<T>(data));
             auto res = p->peer_socket(ios);
             associate_ext(res, handler(std::move(p), defer_start));
@@ -88,7 +105,11 @@ namespace detail {
 
             virtual ~concept() = default;
 
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE
             pair_socket peer_socket(boost::asio::io_service & peer) {
+#else	      
+            pair_socket peer_socket(boost::asio::io_context & peer) {
+#endif
                 pair_socket res(peer);
                 auto uri = socket_.endpoint();
                 BOOST_ASSERT_MSG(!uri.empty(), "uri empty");
diff -up azmq-1.0.2/azmq/detail/socket_service.hpp.2~ azmq-1.0.2/azmq/detail/socket_service.hpp
--- azmq-1.0.2/azmq/detail/socket_service.hpp.2~	2018-01-30 14:29:15.000000000 +0100
+++ azmq-1.0.2/azmq/detail/socket_service.hpp	2020-01-18 21:07:45.429176411 +0100
@@ -24,6 +24,7 @@
 #include "send_op.hpp"
 #include "receive_op.hpp"
 
+#include <boost/version.hpp>
 #include <boost/assert.hpp>
 #include <boost/optional.hpp>
 #include <boost/intrusive/list.hpp>
@@ -32,6 +33,12 @@
 #include <boost/thread/mutex.hpp>
 #include <boost/thread/lock_guard.hpp>
 
+#if BOOST_VERSION < 107000
+#   define AZMQ_DETAIL_USE_IO_SERVICE 1
+#else
+#   include <boost/asio/post.hpp>
+#endif
+
 #include <memory>
 #include <typeindex>
 #include <string>
@@ -87,7 +94,11 @@ namespace detail {
             bool serverish_ = false;
             std::array<op_queue_type, max_ops> op_queue_;
 
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE
             void do_open(boost::asio::io_service & ios,
+#else
+            void do_open(boost::asio::io_context & ios,
+#endif			 
                          context_type & ctx,
                          int type,
                          bool optimize_single_threaded,
@@ -189,7 +200,11 @@ namespace detail {
 
         using core_access = azmq::detail::core_access<socket_service>;
 
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE	  
+        explicit socket_service(boost::asio::io_service & ios)
+#else
         explicit socket_service(boost::asio::io_service & ios)
+#endif
             : azmq::detail::service_base<socket_service>(ios)
             , ctx_(context_ops::get_context())
         { }
@@ -221,7 +236,11 @@ namespace detail {
                                           bool optimize_single_threaded,
                                           boost::system::error_code & ec) {
             BOOST_ASSERT_MSG(impl, "impl");
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE
             impl->do_open(get_io_service(), ctx_, type, optimize_single_threaded, ec);
+#else
+            impl->do_open(get_io_context(), ctx_, type, optimize_single_threaded, ec);
+#endif
             if (ec)
                 impl.reset();
             return ec;
@@ -246,7 +265,11 @@ namespace detail {
             std::tie(it, res) = impl->exts_.emplace(std::type_index(typeid(Extension)),
                                                     socket_ext(std::forward<Extension>(ext)));
             if (res)
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE
                 it->second.on_install(get_io_service(), impl->socket_.get());
+#else
+                it->second.on_install(get_io_context(), impl->socket_.get());
+#endif
             return res;
         }
 
@@ -543,7 +566,11 @@ namespace detail {
             {
                 impl->missed_events_found_ = true;
                 weak_descriptor_ptr weak_impl(impl);
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE
                 impl->sd_->get_io_service().post([weak_impl, ec]() { handle_missed_events(weak_impl, ec); });
+#else
+		boost::asio::post(impl->sd_->get_executor(), [weak_impl, ec]() { handle_missed_events(weak_impl, ec); });
+#endif
             }
         }
 
@@ -618,7 +645,11 @@ namespace detail {
                 auto evs = socket_ops::get_events(impl->socket_, ec) & impl->events_mask();
 
                 if (evs || ec) {
-                    impl->sd_->get_io_service().post([handler, ec] { handler(ec, 0); });
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE
+  		    impl->sd_->get_io_service().post([handler, ec] { handler(ec, 0); });
+#else
+		    boost::asio::post(impl->sd_->get_executor(), [handler, ec] { handler(ec, 0); });
+#endif
                 } else {
                     impl->sd_->async_read_some(boost::asio::null_buffers(),
                                                 std::move(handler));
@@ -664,7 +695,11 @@ namespace detail {
                     if (op->do_perform(impl->socket_)) {
                         impl->in_speculative_completion_ = true;
                         l.unlock();
+#ifdef AZMQ_DETAIL_USE_IO_SERVICE			
                         get_io_service().post(deferred_completion(impl, std::move(op)));
+#else
+                        get_io_context().post(deferred_completion(impl, std::move(op)));
+#endif
                         return ec;
                     }
                 }
